<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 注册C3P0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 注册属性文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
				<!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
			</list>
		</property>
	</bean>

	<!-- 注册SqlSessionFactory的bean dataSource用来连接数据库 configLocation用来指定mybatis的xml路径 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis.xml" />
	</bean>

	<!-- 注册Mapper扫描配置器 它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean， 创建com.test.mapper下的所有接口。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.test.mapper" />
	</bean>

	<!-- 配置基于注解的声明式事物管理。 -->

	<!-- 配置事物管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注册 事物通知 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- aop配置 -->
	<!-- <aop:config> <aop:pointcut expression="execution(* *..service.*.*(..))" 
		id="studentPointcut"/> <aop:advisor advice-ref="transcationAdvice" pointcut-ref="studentPointcut"/> 
		</aop:config> -->

	<!-- 该配置文件用于进行service的bean注册。 -->
	<context:component-scan base-package="com.test.service" />

	<!-- redis数据源 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲数 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 最大空连接数 -->
		<property name="maxTotal" value="${redis.maxTotal}" />
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
		<property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" />
		<!-- 返回连接时，检测连接是否成功 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- Spring-redis连接池管理工厂 -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!-- IP地址 -->
		<property name="hostName" value="${redis.host}" />
		<!-- 端口号 -->
		<property name="port" value="${redis.port}" />
		<!-- 超时时间 默认2000 -->
		<property name="timeout" value="${redis.timeout}" />
		<!-- 连接池配置引用 -->
		<property name="poolConfig" ref="poolConfig" />
		<!-- usePool：是否使用连接池 -->
		<property name="usePool" value="true" />
	</bean>

	<!-- 配置RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<!--自定义redis工具类,在需要缓存的地方注入此类 -->
	<bean id="redisrCacheManager" class="com.test.weixin.util.RedisCacheManager">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
</beans>